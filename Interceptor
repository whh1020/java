package com.qhit.Interceptor;

import com.qhit.user.pojo.Common;
import org.apache.ibatis.executor.parameter.ParameterHandler;
import org.apache.ibatis.executor.resultset.ResultSetHandler;
import org.apache.ibatis.executor.statement.RoutingStatementHandler;
import org.apache.ibatis.executor.statement.StatementHandler;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.plugin.*;
import org.apache.ibatis.reflection.MetaObject;
import org.apache.ibatis.reflection.SystemMetaObject;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;


import java.lang.reflect.InvocationTargetException;
import java.sql.*;
import java.util.Map;
import java.util.Properties;

/**
 * Created by wuhen on 2019/5/15.
 * @Intercepts 说明是一个拦截器
 * @Signature 拦截器的签名
 * type 拦截的类型 四大对象之一( Executor,ResultSetHandler,ParameterHandler,StatementHandler)
 * method 拦截的方法
 * args 参数
 */
//拦截器分页
@Component
//@ConfigurationProperties设置前缀user
//@ConfigurationProperties(prefix = "myPageInterceptor")
@Intercepts({@Signature(type = StatementHandler.class, method = "prepare", args = {Connection.class, Integer.class})})
public class MyPageInterceptor implements Interceptor{

//    private static final String SELECT_ID="search";

    //每页显示的条目数
    private int pageSize;
    //当前实现的页数
    private int currPage;
    private  String dbType;

    public MyPageInterceptor() {
    }

    //插件运行的代码 ，它将代替原有的方法
    @Override
    public Object intercept(Invocation invocation) throws InvocationTargetException, IllegalAccessException {
        //获取StatementHandler  默认是RoutingStatementHandler
        StatementHandler statementHandler = (StatementHandler) invocation.getTarget();
// 获取statementHandler包装类
        MetaObject MetaObjectHandler = SystemMetaObject.forObject(statementHandler);
//分离代理对象
        while (MetaObjectHandler.hasGetter("h")) {
            Object obj = MetaObjectHandler.getValue("h");
            MetaObjectHandler = SystemMetaObject.forObject(obj);

        }
        while (MetaObjectHandler.hasGetter("target")) {
            Object obj = MetaObjectHandler.getValue("target");
            MetaObjectHandler = SystemMetaObject.forObject(obj);

        }
        //获取链接对象
//            Connection connection = (Connection)invocation.getArgs()[0];
//        object.getValue("delegate"); 获取StatementHandler的实现类
        //获取查询接口映射的相关信息
        MappedStatement mappedStatement = (MappedStatement) MetaObjectHandler.getValue("delegate.mappedStatement");
        String mapId = mappedStatement.getId();
        //拦截以.BtPage结尾的请求，分页功能的同一实现
        if (mapId.matches(".+ByPage$")){
            //获取进行数据库操作时管理参数的handler
            ParameterHandler parameterHandler = (ParameterHandler) MetaObjectHandler.getValue("delegate.parameterHandler");
            //获取请求时的参数
            Map<String,Object> paraObject = (Map<String,Object> ) parameterHandler.getParameterObject();
            //参数名称和在service中设置到map中的名称一致
            currPage =(int) paraObject.get("currPage");
            pageSize = (int)paraObject.get("pageSize");
            String sql = (String)MetaObjectHandler.getValue("delegate.boundSql.sql");
            //也可以通过StatementHandler直接获取
//            sql = statementHandler.getBoundSql().getSql();
            //构建分页功能的sql语句
            String limitSql;
            sql = sql.trim();


            limitSql = sql+" limit " +(currPage-1)*pageSize+"," + pageSize;
            //将构建完成的分页sql语句赋值个体‘delegate.boundSql.sql’， 偷天换日
            MetaObjectHandler.setValue("delegate.boundSql.sql",limitSql);

        }


    return invocation.proceed();
    }


//拦截器类型  获取代理对象
    @Override
    public Object plugin(Object o) {
        if(o instanceof StatementHandler){
            return Plugin.wrap(o,this);
        }else{
        return o;
        }
    }
    //设置代理对象的参数
    @Override
    public void setProperties(Properties properties) {
//如果项目中分页的pagesize是统一的，也可以这这里统一配置和获取，
// 这样就不用每次请求都传递pageSize参数了。参数是在配置拦截器时配置d

//        还能在里面配置一些属性，在拦截器的setProperties
//        方法中可以获取配置好的属性值。如项目分页
//        的pageSize参数的值固定，我们就可以配置在这里了，以后就不需要
//                每次传入pageSize了
        String limit1 = properties.getProperty("limit","10");
        this.pageSize = Integer.valueOf(limit1);
        this.dbType=properties.getProperty("dbType","mysql");



    }
//    private  final  StatementHandler delegate;
//    几个重要的参数：
//    Configuration：所有配置的相关信息。
//    ResultSetHandler：用于拦截执行结果的组装。
//    ParameterHandler：拦截执行Sql的参数的组装。
//    Executor：执行Sql的全过程，包括组装参数、组装结果和执行Sql的过程。
//    BoundSql：执行的Sql的相关信息。
    //接下来我们通过如下代码拿到请求时的map对象(反射)。
    // 获取进行数据库操作时管理参数的handler










}
